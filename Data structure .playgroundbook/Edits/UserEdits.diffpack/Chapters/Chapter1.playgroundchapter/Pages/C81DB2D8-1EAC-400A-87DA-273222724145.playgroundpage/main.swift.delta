<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>let array = [7, 2, 6, 3, 9]

func mergeSort&lt;T: Comparable&gt;(_ array: [T]) -&gt; [T] {
    guard array.count &gt; 1 else { return array }
    
    let middleIndex = array.count / 2
    
    let leftArray = mergeSort(Array(array[0..&lt;middleIndex]))
    let rightArray = mergeSort(Array(array[middleIndex..&lt;array.count]))
    
    return merge(leftArray, rightArray)
}

mergeSort(array)

func merge&lt;T: Comparable&gt;(_ left: [T], _ right: [T]) -&gt; [T] {
    var leftIndex = 0
    var rightIndex = 0
    
    var orderedArray: [T] = []
    
    while leftIndex &lt; left.count &amp;&amp; rightIndex &lt; right.count {
        let leftElement = left[leftIndex]
        let rightElement = right[rightIndex]
        
        if leftElement &lt; rightElement {
            orderedArray.append(leftElement)
            leftIndex += 1
        } else if leftElement &gt; rightElement {
            orderedArray.append(rightElement)
            rightIndex += 1
        } else { 
            orderedArray.append(leftElement)
            leftIndex += 1
            orderedArray.append(rightElement)
            rightIndex += 1
        }
    }
    
    while leftIndex &lt; left.count {
        orderedArray.append(left[leftIndex])
        leftIndex += 1
    }
    
    while rightIndex &lt; right.count {
        orderedArray.append(right[rightIndex])
        rightIndex += 1
    }
    
    return orderedArray
}



</string>
			<key>ModifiedRange</key>
			<string>{0, 1364}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>

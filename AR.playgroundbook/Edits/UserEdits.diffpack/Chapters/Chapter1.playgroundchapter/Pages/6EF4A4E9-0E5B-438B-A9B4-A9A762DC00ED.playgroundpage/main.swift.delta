<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import PlaygroundSupport
import SwiftUI
import RealityKit
import ARKit

struct ARViewContainer: UIViewRepresentable {
    typealias UIViewType = ARView
    func makeUIView(context: UIViewRepresentableContext&lt;ARViewContainer&gt;) -&gt; ARView {
        let arView = ARView(frame: .zero, cameraMode: .ar, automaticallyConfigureSession: true)
        let mesh = MeshResource.generateBox(size: 0.1)
        let material = SimpleMaterial(color: .systemPink, roughness: 0.5, isMetallic: true)
        let modelEntity = ModelEntity(mesh: mesh, materials:[material])
        let anchorEntity = AnchorEntity(plane: .horizontal)
        modelEntity.generateCollisionShapes(recursive: true)
        arView.installGestures([.translation, .rotation, .scale], for: modelEntity)
        arView.enableTapGesture()
        arView.enableObjectRemoval()
        return arView
    }
    func updateUIView(_ uiView: ARView, context: UIViewRepresentableContext&lt;ARViewContainer&gt;) {
    }
}

extension ARView {
    func enableTapGesture(){
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(handleTap(recognizer:))) 
        self.addGestureRecognizer(tapGestureRecognizer)
    }
    
    @objc func handleTap(recognizer: UITapGestureRecognizer) {
        let tapLocation = recognizer.location(in: self)
        guard let rayResult = self.ray(through: tapLocation) else { return }
        let results = self.scene.raycast(origin: rayResult.origin, direction: rayResult.direction)
        if let firstResult = results.first {
            var position = firstResult.position
            position += 0.3/2
            
            placeCube(at: position)
        } else {
            let results = self.raycast(from: tapLocation, allowing: .estimatedPlane, alignment: .any)
            if let firstResult = results.first {
                let position = simd_make_float3(firstResult.worldTransform.columns.3)
                placeCube(at: position)
            }
        }
    }
    func placeCube(at position: SIMD3&lt;Float&gt;) {
    let mesh = MeshResource.generateBox(size: 0.1)
    let material = SimpleMaterial(color: UIColor.randomColor(), roughness: 0.5, isMetallic: true)
        let modelEntity = ModelEntity(mesh: mesh, materials:[material])
        let anchorEntity = AnchorEntity(plane: .horizontal)
        anchorEntity.name = "CubeAnchor"
        anchorEntity.addChild(modelEntity)
        self.scene.addAnchor(anchorEntity)
        
        modelEntity.generateCollisionShapes(recursive: true)
        self.installGestures([.translation, .rotation, .scale], for: modelEntity)
        
    }
    
}


extension UIColor {
    class func randomColor() -&gt; UIColor {
        let colors: [UIColor] = [.white, .red, .blue, .yellow, .orange, .green]
        let randomIndex = Int(arc4random_uniform(UInt32(colors.count)))
        return colors[randomIndex]
    }
}

extension ARView { 
    func enableObjectRemoval(){
        let longPressGestureRecognizer = UILongPressGestureRecognizer(target: self, action: #selector(handleLongPress(recognizer:)))
        self.addGestureRecognizer(longPressGestureRecognizer)
    }
    
    @objc func handleLongPress(recognizer: UILongPressGestureRecognizer) {
        let location = recognizer.location(in: self)
        if let entity = self.entity(at: location){
            if let anchorEntity = entity.anchor, anchorEntity.name == "CubeAnchor"{
                anchorEntity.removeFromParent()
                print("Removed anchor with name: " + anchorEntity.name)
            }
        }
    } 
}


struct ContentView: View {
    var body: some View {
        return ARViewContainer()
    }
} 

PlaygroundPage.current.setLiveView(ContentView())

</string>
			<key>ModifiedRange</key>
			<string>{0, 3697}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
